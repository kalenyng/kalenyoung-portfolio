---
import ThemeToggle from './ThemeToggle';

const navLinks = [
  { href: '/#projects', label: 'Projects' },
  { href: '/#skills', label: 'Skills' },
  { href: '/#about', label: 'About' },
  { href: '/#contact', label: 'Contact' },
];
---

<header
  class="fixed left-0 right-0 top-0 z-50 transition-all duration-300"
  style="border-bottom: 1px solid transparent;"
  data-nav
>
  <nav class="mx-auto flex max-w-7xl items-center justify-between px-4 py-4 sm:px-6 lg:px-8">
    <!-- Logo / Home link -->
    <a
      href="/"
      class="flex items-center gap-3 font-heading text-xl font-bold transition-colors hover:text-ember"
      style="color: var(--text-primary);"
    >
      <div class="flex h-8 w-8 items-center justify-center rounded-lg bg-ember text-white font-bold text-sm">
        KY
      </div>
      <span class="hidden sm:inline">Kalen Young</span>
    </a>

    <!-- Desktop navigation -->
    <div class="flex items-center gap-6">
      {
        navLinks.map((link) => (
          <a
            href={link.href}
            class="nav-link relative text-sm font-medium transition-colors"
            style="color: var(--text-primary);"
          >
            {link.label}
          </a>
        ))
      }
      <ThemeToggle client:load />
    </div>

    <!-- Mobile menu button -->
    <div class="hidden items-center gap-4">
      <ThemeToggle client:load />
      <button
        id="mobile-menu-button"
        class="rounded-lg p-2 transition-colors hover:bg-opacity-10"
        style="background-color: var(--mist);"
        aria-label="Toggle menu"
        aria-expanded="false"
      >
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
  </nav>

  <!-- Mobile menu -->
  <div
    id="mobile-menu"
    class="hidden border-t md:hidden"
    style="border-color: var(--border); background-color: var(--bg-secondary);"
  >
    <div class="flex flex-col space-y-1 px-4 py-4">
      {
        navLinks.map((link) => (
          <a
            href={link.href}
            class="mobile-nav-link rounded-lg px-4 py-3 text-base font-medium transition-colors hover:bg-opacity-5"
            style="color: var(--text-secondary);"
          >
            {link.label}
          </a>
        ))
      }
    </div>
  </div>
</header>

<style>
  header[data-nav] {
    background-color: transparent;
    border-color: transparent;
    backdrop-filter: blur(0px);
    transition:
      background-color 0.3s cubic-bezier(0.22, 1, 0.36, 1),
      border-color 0.3s cubic-bezier(0.22, 1, 0.36, 1),
      backdrop-filter 0.3s cubic-bezier(0.22, 1, 0.36, 1);
  }

  header[data-nav].scrolled {
    backdrop-filter: blur(12px);
    border-bottom: 1px solid var(--border);
  }

  [data-theme='light'] header[data-nav].scrolled {
    background-color: rgba(249, 249, 249, 0.8);
  }

  [data-theme='dark'] header[data-nav].scrolled {
    background-color: rgba(10, 14, 22, 0.8);
  }
  
  /* Ensure nav text is always visible */
  header[data-nav] .nav-link {
    color: var(--text-primary);
  }

  .nav-link {
    position: relative;
    font-weight: 500;
  }

  .nav-link::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: var(--accent);
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.25s cubic-bezier(0.22, 1, 0.36, 1);
  }

  .nav-link:hover::after,
  .nav-link.active::after {
    transform: scaleX(1);
  }

  .nav-link.active {
    color: var(--accent);
  }
</style>

<script>
  // Mobile menu toggle
  const menuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');

  menuButton?.addEventListener('click', () => {
    const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
    menuButton.setAttribute('aria-expanded', String(!isExpanded));
    mobileMenu?.classList.toggle('hidden');
  });

  // Close mobile menu when clicking a link
  const mobileLinks = document.querySelectorAll('.mobile-nav-link');
  mobileLinks.forEach((link) => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.add('hidden');
      menuButton?.setAttribute('aria-expanded', 'false');
    });
  });

  // Navbar blur on scroll - enhanced
  const nav = document.querySelector('[data-nav]');
  
  const handleScroll = () => {
    if (window.scrollY > 20) {
      nav?.classList.add('scrolled');
    } else {
      nav?.classList.remove('scrolled');
    }
  };

  // Use RAF for smoother updates
  let ticking = false;
  const requestScrollUpdate = () => {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        handleScroll();
        ticking = false;
      });
      ticking = true;
    }
  };

  window.addEventListener('scroll', requestScrollUpdate, { passive: true });
  handleScroll(); // Check initial state

  // Active link highlighting based on scroll position (only on homepage)
  const sections = document.querySelectorAll('section[id]');
  const navLinks = document.querySelectorAll('.nav-link');

  const highlightNav = () => {
    const scrollY = window.scrollY;

    sections.forEach((section) => {
      const sectionTop = (section as HTMLElement).offsetTop - 150;
      const sectionHeight = (section as HTMLElement).offsetHeight;
      const sectionId = section.getAttribute('id');

      if (scrollY >= sectionTop && scrollY < sectionTop + sectionHeight) {
        navLinks.forEach((link) => {
          link.classList.remove('active');
          const href = link.getAttribute('href');
          if (href === `/#${sectionId}` || href === `#${sectionId}`) {
            link.classList.add('active');
          }
        });
      }
    });
  };

  // Only run highlighting if we have sections (i.e., on homepage)
  if (sections.length > 0) {
    window.addEventListener('scroll', highlightNav, { passive: true });
    highlightNav(); // Check initial state
  }
</script>

